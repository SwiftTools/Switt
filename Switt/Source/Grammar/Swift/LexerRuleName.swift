enum RuleName: String {
    case ADD = "ADD"
    case AND = "AND"
    case AT = "AT"
    case BANG = "BANG"
    case Binary_digit = "Binary_digit"
    case Binary_literal = "Binary_literal"
    case Binary_literal_character = "Binary_literal_character"
    case Binary_literal_characters = "Binary_literal_characters"
    case Block_comment = "Block_comment"
    case CARET = "CARET"
    case COLON = "COLON"
    case COMMA = "COMMA"
    case DIV = "DIV"
    case DOT = "DOT"
    case Decimal_digit = "Decimal_digit"
    case Decimal_exponent = "Decimal_exponent"
    case Decimal_fraction = "Decimal_fraction"
    case Decimal_literal = "Decimal_literal"
    case Decimal_literal_character = "Decimal_literal_character"
    case Decimal_literal_characters = "Decimal_literal_characters"
    case EQUAL = "EQUAL"
    case Escaped_character = "Escaped_character"
    case Floating_point_e = "Floating_point_e"
    case Floating_point_literal = "Floating_point_literal"
    case Floating_point_p = "Floating_point_p"
    case GT = "GT"
    case Hexadecimal_digit = "Hexadecimal_digit"
    case Hexadecimal_exponent = "Hexadecimal_exponent"
    case Hexadecimal_fraction = "Hexadecimal_fraction"
    case Hexadecimal_literal = "Hexadecimal_literal"
    case Hexadecimal_literal_character = "Hexadecimal_literal_character"
    case Hexadecimal_literal_characters = "Hexadecimal_literal_characters"
    case Identifier = "Identifier"
    case Identifier_character = "Identifier_character"
    case Identifier_characters = "Identifier_characters"
    case Identifier_head = "Identifier_head"
    case Implicit_parameter_name = "Implicit_parameter_name"
    case Interpolated_string_literal = "Interpolated_string_literal"
    case Interpolated_text_item = "Interpolated_text_item"
    case LBRACK = "LBRACK"
    case LCURLY = "LCURLY"
    case LPAREN = "LPAREN"
    case LT = "LT"
    case Line_comment = "Line_comment"
    case MOD = "MOD"
    case MUL = "MUL"
    case OR = "OR"
    case Octal_digit = "Octal_digit"
    case Octal_literal = "Octal_literal"
    case Octal_literal_character = "Octal_literal_character"
    case Octal_literal_characters = "Octal_literal_characters"
    case Operator_following_character = "Operator_following_character"
    case Operator_head_other = "Operator_head_other"
    case Platform = "Platform"
    case Platform_name = "Platform_name"
    case Platform_version = "Platform_version"
    case Pure_decimal_digits = "Pure_decimal_digits"
    case QUESTION = "QUESTION"
    case Quoted_text = "Quoted_text"
    case Quoted_text_item = "Quoted_text_item"
    case RBRACK = "RBRACK"
    case RCURLY = "RCURLY"
    case RPAREN = "RPAREN"
    case SEMI = "SEMI"
    case SUB = "SUB"
    case Sign = "Sign"
    case Static_string_literal = "Static_string_literal"
    case TILDE = "TILDE"
    case UNDERSCORE = "UNDERSCORE"
    case WS = "WS"
    case _operator = "_operator"
    case access_level_modifier = "access_level_modifier"
    case architecture = "architecture"
    case array_literal = "array_literal"
    case array_literal_item = "array_literal_item"
    case array_literal_items = "array_literal_items"
    case arrow_operator = "arrow_operator"
    case assignment_operator = "assignment_operator"
    case assignment_statement = "assignment_statement"
    case associativity = "associativity"
    case associativity_clause = "associativity_clause"
    case attribute = "attribute"
    case attribute_argument_clause = "attribute_argument_clause"
    case attribute_name = "attribute_name"
    case attributes = "attributes"
    case availability_argument = "availability_argument"
    case availability_arguments = "availability_arguments"
    case availability_condition = "availability_condition"
    case balanced_token = "balanced_token"
    case balanced_tokens = "balanced_tokens"
    case binary_expression = "binary_expression"
    case binary_expressions = "binary_expressions"
    case binary_operator = "binary_operator"
    case boolean_literal = "boolean_literal"
    case branch_statement = "branch_statement"
    case break_statement = "break_statement"
    case build_AND = "build_AND"
    case build_OR = "build_OR"
    case build_configuration = "build_configuration"
    case build_configuration_else_clause = "build_configuration_else_clause"
    case build_configuration_elseif_clause = "build_configuration_elseif_clause"
    case build_configuration_elseif_clauses = "build_configuration_elseif_clauses"
    case build_configuration_statement = "build_configuration_statement"
    case capture_list = "capture_list"
    case capture_list_item = "capture_list_item"
    case capture_list_items = "capture_list_items"
    case capture_specifier = "capture_specifier"
    case case_condition = "case_condition"
    case case_item_list = "case_item_list"
    case case_label = "case_label"
    case catch_clause = "catch_clause"
    case catch_clauses = "catch_clauses"
    case class_body = "class_body"
    case class_declaration = "class_declaration"
    case class_name = "class_name"
    case class_requirement = "class_requirement"
    case closure_expression = "closure_expression"
    case closure_signature = "closure_signature"
    case code_block = "code_block"
    case compiler_control_statement = "compiler_control_statement"
    case condition = "condition"
    case condition_clause = "condition_clause"
    case condition_list = "condition_list"
    case conditional_operator = "conditional_operator"
    case conformance_requirement = "conformance_requirement"
    case constant_declaration = "constant_declaration"
    case context_sensitive_keyword = "context_sensitive_keyword"
    case continue_statement = "continue_statement"
    case control_transfer_statement = "control_transfer_statement"
    case declaration = "declaration"
    case declaration_modifier = "declaration_modifier"
    case declaration_modifiers = "declaration_modifiers"
    case declarations = "declarations"
    case default_argument_clause = "default_argument_clause"
    case default_label = "default_label"
    case defer_statement = "defer_statement"
    case deinitializer_declaration = "deinitializer_declaration"
    case dictionary_literal = "dictionary_literal"
    case dictionary_literal_item = "dictionary_literal_item"
    case dictionary_literal_items = "dictionary_literal_items"
    case didSet_clause = "didSet_clause"
    case do_statement = "do_statement"
    case dot_operator_character = "dot_operator_character"
    case dot_operator_head = "dot_operator_head"
    case element_name = "element_name"
    case else_clause = "else_clause"
    case enum_case_name = "enum_case_name"
    case enum_case_pattern = "enum_case_pattern"
    case enum_declaration = "enum_declaration"
    case enum_name = "enum_name"
    case expression = "expression"
    case expression_element = "expression_element"
    case expression_element_list = "expression_element_list"
    case expression_list = "expression_list"
    case expression_pattern = "expression_pattern"
    case extension_body = "extension_body"
    case extension_declaration = "extension_declaration"
    case external_parameter_name = "external_parameter_name"
    case fallthrough_statement = "fallthrough_statement"
    case file_name = "file_name"
    case for_in_statement = "for_in_statement"
    case for_init = "for_init"
    case for_statement = "for_statement"
    case function_body = "function_body"
    case function_declaration = "function_declaration"
    case function_head = "function_head"
    case function_name = "function_name"
    case function_result = "function_result"
    case function_signature = "function_signature"
    case generic_argument = "generic_argument"
    case generic_argument_clause = "generic_argument_clause"
    case generic_argument_list = "generic_argument_list"
    case generic_parameter = "generic_parameter"
    case generic_parameter_clause = "generic_parameter_clause"
    case generic_parameter_list = "generic_parameter_list"
    case getter_clause = "getter_clause"
    case getter_keyword_clause = "getter_keyword_clause"
    case getter_setter_block = "getter_setter_block"
    case getter_setter_keyword_block = "getter_setter_keyword_block"
    case guard_statement = "guard_statement"
    case identifier = "identifier"
    case identifier_list = "identifier_list"
    case identifier_pattern = "identifier_pattern"
    case if_statement = "if_statement"
    case implicit_member_expression = "implicit_member_expression"
    case import_declaration = "import_declaration"
    case import_kind = "import_kind"
    case import_path = "import_path"
    case import_path_identifier = "import_path_identifier"
    case in_out_expression = "in_out_expression"
    case infix_operator_attributes = "infix_operator_attributes"
    case infix_operator_declaration = "infix_operator_declaration"
    case initializer = "initializer"
    case initializer_body = "initializer_body"
    case initializer_declaration = "initializer_declaration"
    case initializer_head = "initializer_head"
    case integer_literal = "integer_literal"
    case label_name = "label_name"
    case labeled_statement = "labeled_statement"
    case line_control_statement = "line_control_statement"
    case line_number = "line_number"
    case literal = "literal"
    case literal_expression = "literal_expression"
    case local_parameter_name = "local_parameter_name"
    case loop_statement = "loop_statement"
    case negate_prefix_operator = "negate_prefix_operator"
    case nil_literal = "nil_literal"
    case numeric_literal = "numeric_literal"
    case operating_system = "operating_system"
    case operator_character = "operator_character"
    case operator_declaration = "operator_declaration"
    case operator_head = "operator_head"
    case optional_binding_condition = "optional_binding_condition"
    case optional_binding_continuation = "optional_binding_continuation"
    case optional_binding_continuation_list = "optional_binding_continuation_list"
    case optional_binding_head = "optional_binding_head"
    case optional_pattern = "optional_pattern"
    case parameter = "parameter"
    case parameter_clause = "parameter_clause"
    case parameter_clauses = "parameter_clauses"
    case parameter_list = "parameter_list"
    case parenthesized_expression = "parenthesized_expression"
    case pattern = "pattern"
    case pattern_initializer = "pattern_initializer"
    case pattern_initializer_list = "pattern_initializer_list"
    case platform_testing_function = "platform_testing_function"
    case postfix_expression = "postfix_expression"
    case postfix_operator = "postfix_operator"
    case postfix_operator_declaration = "postfix_operator_declaration"
    case precedence_clause = "precedence_clause"
    case precedence_level = "precedence_level"
    case prefix_expression = "prefix_expression"
    case prefix_operator = "prefix_operator"
    case prefix_operator_declaration = "prefix_operator_declaration"
    case primary_expression = "primary_expression"
    case protocol_associated_type_declaration = "protocol_associated_type_declaration"
    case protocol_body = "protocol_body"
    case protocol_composition_type = "protocol_composition_type"
    case protocol_declaration = "protocol_declaration"
    case protocol_identifier = "protocol_identifier"
    case protocol_identifier_list = "protocol_identifier_list"
    case protocol_initializer_declaration = "protocol_initializer_declaration"
    case protocol_member_declaration = "protocol_member_declaration"
    case protocol_member_declarations = "protocol_member_declarations"
    case protocol_method_declaration = "protocol_method_declaration"
    case protocol_name = "protocol_name"
    case protocol_property_declaration = "protocol_property_declaration"
    case protocol_subscript_declaration = "protocol_subscript_declaration"
    case range_operator = "range_operator"
    case raw_value_assignment = "raw_value_assignment"
    case raw_value_literal = "raw_value_literal"
    case raw_value_style_enum = "raw_value_style_enum"
    case raw_value_style_enum_case = "raw_value_style_enum_case"
    case raw_value_style_enum_case_clause = "raw_value_style_enum_case_clause"
    case raw_value_style_enum_case_list = "raw_value_style_enum_case_list"
    case raw_value_style_enum_member = "raw_value_style_enum_member"
    case raw_value_style_enum_members = "raw_value_style_enum_members"
    case repeat_while_statement = "repeat_while_statement"
    case requirement = "requirement"
    case requirement_clause = "requirement_clause"
    case requirement_list = "requirement_list"
    case return_statement = "return_statement"
    case same_type_equals = "same_type_equals"
    case same_type_requirement = "same_type_requirement"
    case self_expression = "self_expression"
    case setter_clause = "setter_clause"
    case setter_keyword_clause = "setter_keyword_clause"
    case setter_name = "setter_name"
    case statement = "statement"
    case statement_label = "statement_label"
    case statements = "statements"
    case string_literal = "string_literal"
    case struct_body = "struct_body"
    case struct_declaration = "struct_declaration"
    case struct_name = "struct_name"
    case subscript_declaration = "subscript_declaration"
    case subscript_head = "subscript_head"
    case subscript_result = "subscript_result"
    case superclass_expression = "superclass_expression"
    case superclass_initializer_expression = "superclass_initializer_expression"
    case superclass_method_expression = "superclass_method_expression"
    case superclass_subscript_expression = "superclass_subscript_expression"
    case switch_case = "switch_case"
    case switch_cases = "switch_cases"
    case switch_statement = "switch_statement"
    case throw_statement = "throw_statement"
    case top_level = "top_level"
    case top_level_declaration = "top_level_declaration"
    case trailing_closure = "trailing_closure"
    case try_operator = "try_operator"
    case tuple_pattern = "tuple_pattern"
    case tuple_pattern_element = "tuple_pattern_element"
    case tuple_pattern_element_list = "tuple_pattern_element_list"
    case tuple_type = "tuple_type"
    case tuple_type_body = "tuple_type_body"
    case tuple_type_element = "tuple_type_element"
    case tuple_type_element_list = "tuple_type_element_list"
    case type = "type"
    case type_annotation = "type_annotation"
    case type_casting_operator = "type_casting_operator"
    case type_identifier = "type_identifier"
    case type_inheritance_clause = "type_inheritance_clause"
    case type_inheritance_list = "type_inheritance_list"
    case type_name = "type_name"
    case typealias_assignment = "typealias_assignment"
    case typealias_declaration = "typealias_declaration"
    case typealias_head = "typealias_head"
    case typealias_name = "typealias_name"
    case union_style_enum = "union_style_enum"
    case union_style_enum_case = "union_style_enum_case"
    case union_style_enum_case_clause = "union_style_enum_case_clause"
    case union_style_enum_case_list = "union_style_enum_case_list"
    case union_style_enum_member = "union_style_enum_member"
    case union_style_enum_members = "union_style_enum_members"
    case value_binding_pattern = "value_binding_pattern"
    case variable_declaration = "variable_declaration"
    case variable_declaration_head = "variable_declaration_head"
    case variable_name = "variable_name"
    case where_clause = "where_clause"
    case where_expression = "where_expression"
    case while_statement = "while_statement"
    case wildcard_expression = "wildcard_expression"
    case wildcard_pattern = "wildcard_pattern"
    case willSet_clause = "willSet_clause"
    case willSet_didSet_block = "willSet_didSet_block"
}